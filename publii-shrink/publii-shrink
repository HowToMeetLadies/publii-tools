#!/usr/bin/env python3

import argparse
import os
import sqlite3
import re
from pathlib import Path
from collections import defaultdict

def parse_args():
    parser = argparse.ArgumentParser(
        description="Find and optionally delete unreferenced post media files in a Publii project."
    )
    parser.add_argument("project_dir", metavar="PROJECT_DIR", help="Path to the Publii project directory")
    parser.add_argument("--dry-run", action="store_true", help="Show what would be deleted, but don't delete anything (default)")
    parser.add_argument("--delete", action="store_true", help="Actually delete unreferenced files (overrides --dry-run)")
    parser.add_argument("--responsive", action="store_true", help="Delete responsive folder only if other files are deleted")
    parser.add_argument("--force-responsive", action="store_true", help="Always delete responsive folder")
    return parser.parse_args()

def get_referenced_filenames(db_path):
    referenced = defaultdict(set)
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    cursor.execute("SELECT post_id, url FROM posts_images WHERE url IS NOT NULL")
    for post_id, url in cursor.fetchall():
        filename = os.path.basename(url)
        referenced[str(post_id)].add(filename)

    cursor.execute("SELECT id, text FROM posts WHERE text LIKE '%#DOMAIN_NAME#%'")
    pattern = re.compile(r"#DOMAIN_NAME#([^\\s\"'\\)\\]>]+)")
    for post_id, text in cursor.fetchall():
        matches = pattern.findall(text or "")
        referenced[str(post_id)].update(matches)

    conn.close()
    return referenced

def process_post_media(post_path, post_id, referenced_files, dry_run, responsive_flag, force_responsive):
    unreferenced = []
    responsive_deleted = False

    for root, dirs, files in os.walk(post_path):
        rel_root = os.path.relpath(root, post_path)
        if rel_root == "responsive" and not force_responsive and not responsive_flag:
            continue
        for file in files:
            rel_path = os.path.join(rel_root, file) if rel_root != '.' else file
            if rel_path.startswith("responsive/") and not (force_responsive or responsive_flag):
                continue
            if file not in referenced_files:
                unreferenced.append(os.path.join(root, file))

    if unreferenced:
        print(f"üìÇ Unreferenced files in post {post_id}:")
        for path in unreferenced:
            print(f"  üóÉÔ∏è  {path}")
            if not dry_run:
                os.remove(path)

    responsive_path = os.path.join(post_path, "responsive")
    if os.path.isdir(responsive_path):
        if force_responsive or (responsive_flag and unreferenced):
            print(f"üßπ Deleting responsive folder in post {post_id}: {responsive_path}")
            if not dry_run:
                for root, dirs, files in os.walk(responsive_path, topdown=False):
                    for f in files:
                        os.remove(os.path.join(root, f))
                    for d in dirs:
                        os.rmdir(os.path.join(root, d))
                os.rmdir(responsive_path)
            responsive_deleted = True

    return len(unreferenced), responsive_deleted

def main():
    args = parse_args()
    project_dir = Path(args.project_dir).resolve()
    db_path = project_dir / "input" / "db.sqlite"
    media_root = project_dir / "input" / "media" / "posts"

    if not db_path.is_file():
        print(f"‚ùå Error: {db_path} does not exist.")
        return
    if not media_root.is_dir():
        print(f"‚ùå Error: {media_root} does not exist.")
        return

    print(f"üîç Scanning project: {project_dir.name}")
    referenced = get_referenced_filenames(str(db_path))

    dry_run = not args.delete
    total_count = 0
    summary = {}

    for post_dir in media_root.iterdir():
        if not post_dir.is_dir():
            continue
        post_id = post_dir.name
        ref_files = referenced.get(post_id, set())
        deleted, responsive_deleted = process_post_media(
            str(post_dir), post_id, ref_files,
            dry_run, args.responsive, args.force_responsive
        )
        if deleted or responsive_deleted:
            summary[post_id] = summary.get(post_id, 0) + deleted + (1 if responsive_deleted else 0)
            total_count += deleted + (1 if responsive_deleted else 0)

    print()
    if summary:
        print("üìä ========= SUMMARY =========")
        for post_id, count in summary.items():
            print(f"üìù Post {post_id}: {count} unreferenced file(s)")
        print(f"üì¶ Total: {total_count} unreferenced file(s)")
        print("==============================")
    else:
        print("‚úÖ No unreferenced files found.")

    print()
    print("‚úÖ Deletion complete." if not dry_run else "üß™ Dry-run complete. No files were deleted.")

if __name__ == "__main__":
    main()
